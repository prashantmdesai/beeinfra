[Unit]
Description=Mount Azure File Share with comprehensive diagnostics
After=network-online.target
Wants=network-online.target
Before=docker.service kubelet.service

[Service]
Type=oneshot
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

# Step 1: Create mount directory
ExecStartPre=/bin/bash -c 'echo "[MOUNT] Step 1/7: Creating mount directory"; mkdir -p /mnt/dats-beeux-dev-shaf-afs && echo "[MOUNT-OK] Directory created" || { echo "[MOUNT-FAILED] Directory creation failed"; exit 1; }'

# Step 2: Set ownership
ExecStartPre=/bin/bash -c 'echo "[MOUNT] Step 2/7: Setting ownership beeuser:beeuser"; chown beeuser:beeuser /mnt/dats-beeux-dev-shaf-afs && echo "[MOUNT-OK] Ownership set" || { echo "[MOUNT-FAILED] chown failed"; exit 1; }'

# Step 3: Set permissions
ExecStartPre=/bin/bash -c 'echo "[MOUNT] Step 3/7: Setting permissions 775"; chmod 775 /mnt/dats-beeux-dev-shaf-afs && echo "[MOUNT-OK] Permissions set" || { echo "[MOUNT-FAILED] chmod failed"; exit 1; }'

# Step 4: DNS resolution check
ExecStartPre=/bin/bash -c 'echo "[MOUNT] Step 4/7: Checking DNS for datsbeeuxdevstacct.file.core.windows.net"; for i in {1..30}; do if host datsbeeuxdevstacct.file.core.windows.net >/dev/null 2>&1; then echo "[MOUNT-OK] DNS resolved on attempt $i"; exit 0; fi; echo "[MOUNT-WAIT] DNS not ready, attempt $i/30 (waiting 3s)"; sleep 3; done; echo "[MOUNT-FAILED] DNS failed after 90 seconds"; exit 1'

# Step 5: Update fstab
ExecStartPre=/bin/bash -c 'echo "[MOUNT] Step 5/7: Updating /etc/fstab with cache=none"; if ! grep -q "/mnt/dats-beeux-dev-shaf-afs" /etc/fstab; then echo "[MOUNT-FAILED] fstab entry missing!"; exit 1; fi; sed -i "s/serverino,nosharesock,actimeo=[0-9]*/cache=none,serverino,nosharesock,actimeo=1/g" /etc/fstab && echo "[MOUNT-OK] fstab updated" || { echo "[MOUNT-FAILED] fstab update failed"; exit 1; }'

# Step 6: Unmount if already mounted (to clear stale cache)
ExecStartPre=/bin/bash -c 'echo "[MOUNT] Step 6/7: Checking for existing mount"; if mountpoint -q /mnt/dats-beeux-dev-shaf-afs; then echo "[MOUNT-WARN] Already mounted, unmounting to clear cache"; umount -l /mnt/dats-beeux-dev-shaf-afs 2>/dev/null; sleep 2; fi; echo "[MOUNT-OK] Ready to mount"'

# Step 7: Mount the share
ExecStart=/bin/bash -c 'echo "[MOUNT] Step 7/7: Mounting share"; mount /mnt/dats-beeux-dev-shaf-afs && echo "[MOUNT-OK] Mount succeeded" || { echo "[MOUNT-FAILED] Mount command failed (exit $?)"; exit 1; }'

# Verification 1: Check mountpoint
ExecStartPost=/bin/bash -c 'sleep 2; echo "[VERIFY] Checking mountpoint"; if ! mountpoint -q /mnt/dats-beeux-dev-shaf-afs; then echo "[VERIFY-FAILED] Not a mountpoint"; exit 1; fi; echo "[VERIFY-OK] Mountpoint confirmed"'

# Verification 2: Check /proc/mounts
ExecStartPost=/bin/bash -c 'echo "[VERIFY] Checking /proc/mounts"; if ! grep -q "dats-beeux-dev-shaf-afs" /proc/mounts; then echo "[VERIFY-FAILED] Not in /proc/mounts"; exit 1; fi; echo "[VERIFY-OK] Found in /proc/mounts"'

# Verification 3: Check quota/size
ExecStartPost=/bin/bash -c 'echo "[VERIFY] Checking disk quota"; QUOTA=$(df -BG /mnt/dats-beeux-dev-shaf-afs 2>/dev/null | tail -1 | awk "{print $2}" | tr -d "G"); echo "[VERIFY-INFO] Quota shows: ${QUOTA}GB"; if [ "$QUOTA" -lt 50 ]; then echo "[VERIFY-WARN] Quota is ${QUOTA}GB (expected 100GB) - possible cache issue"; fi'

# Verification 4: List contents
ExecStartPost=/bin/bash -c 'echo "[VERIFY] Listing directory"; FILES=$(ls -A /mnt/dats-beeux-dev-shaf-afs 2>/dev/null | wc -l); echo "[VERIFY-INFO] Directory contains $FILES items"; if [ $FILES -eq 0 ]; then echo "[VERIFY-WARN] Directory is empty!"; else ls -la /mnt/dats-beeux-dev-shaf-afs | head -10; fi'

# Final success message
ExecStartPost=/bin/bash -c 'echo "========================================"; echo "[MOUNT-SUCCESS] Azure File Share mounted"; df -h /mnt/dats-beeux-dev-shaf-afs; echo "========================================"'

[Install]
WantedBy=multi-user.target
